import numpy as np
import matplotlib.pyplot as plt


def Change_function(Apos,Aneg,taupos,tauneg,time):
    F = np.zeros(len(time))
    for i,t in enumerate(time):
        if t<0:
            F[i] = Apos*exp(t/taupos)
            
        else:
            F[i] = Aneg*exp(-t/tauneg)
    return F

Apos = 0.005 # in %
Aneg = -1.05*Apos # in%
taupos = tauneg = 20 #ms
deltat = 0.1
time = np.arange(-100.0, 100, deltat)


plt.plot(time,Change_function(Apos,Aneg,taupos,tauneg,time)*100)
plt.xlabel(r'$\Delta$t (ms)')
plt.ylabel('STDP (%)')

def ismember(B,A):
    B_unique_sorted, B_idx = np.unique(B, return_index=True)
    B_in_A_bool = np.in1d(B_unique_sorted, A, assume_unique=True)
    return B_in_A_bool

    
def spike_trains(num_cells,frequency,delay):
    spikes = {}
    num_spikes_per_cell = delay/100*frequency + delay/10000*frequency 
    
    for i in range(num_cells):
        isi = np.cumsum(np.random.poisson(frequency, num_spikes_per_cell).astype(float)*10)
        for spike in isi:
            spikes[spike] = spikes.get(spike, []) + [i]
    return spikes
    
#%%
def neuron(Vrest, Vt, taum, tau_ex, tau_in, tau_neg, tau_pos, time, deltat, g_max, g_in_bar, Eex, Ein, A_neg, A_pos):
    
    #generate spike trains for inhibitory and excitatory neuron populations with function spike_trains
    N = 1000
    inhibitory_spike_trains = spike_trains(200,10,delay)
    excitatory_spike_trains = spike_trains(N,10,delay)
    
    count = 1
    
    V = np.zeros(len(time))
    V[0] = Vrest
    
    g_ex = np.zeros(len(time))
    g_ex[0] = g_max
    
    g_in = np.zeros(len(time))
    g_in[0] = g_in_bar
    
    ga = np.ones(N)*g_max
    M = np.zeros(len(time))
    P = np.zeros((N,len(time)))
    
    
    for t in range(len(time)-1):
        
        g_ex[t+1]= g_ex[t] + deltat*(-g_ex[t]/tau_ex)
        g_in[t+1]= g_in[t] + deltat*(-g_in[t]/tau_in)
        M[t+1] = M[t] + deltat*(-M[t]/tau_neg)
        P[:,t+1] = P[:,t] + deltat*(-P[:,t]/tau_pos)
        
        g_in[t+1] += g_in_bar*len(inhibitory_spike_trains.get(t+1,[]))
        
        g_ex[t+1] += sum(ga[excitatory_spike_trains.get(t+1,[])])
                
        V[t+1] = V[t] + deltat/taum*((-V[t] + Vrest) +g_ex[t]*(Eex-V[t])+g_in[t]*(Ein-V[t]))
        
        ga[excitatory_spike_trains.get(t+1,[])] += M[t+1]*g_max
        ga[np.less(ga,0)] = 0
        
        if V[t+1] > Vt:
            V[t+1] = -60
            count +=1
            M[t+1] += A_neg
            ga += P[:,t+1]*g_max
            ga[np.greater(ga,g_max)] = g_max
            
    print ('The firing rate is :'+str(count*1000/time[-1])+' spike/s')   # firing rate ~ 1/T*1000/time[-1]
    
    return V

delay = 100000
taum = 20
tau_ex = 5
tau_in = 5
Vrest = -70
Eex = 0
Ein = -70
Vt = -54
g_max = 0.015
deltat = 0.1
g_in_bar = 0.05
A_pos = 0.005 # in %
A_neg = -1.05*Apos # in%
tau_pos = tau_neg = 20 #ms
time = np.arange(0.0, delay, deltat)

plt.plot(time, neuron(Vrest, Vt, taum, tau_ex, tau_in, tau_neg, tau_pos, time, deltat, g_max, g_in_bar, Eex, Ein, A_neg, A_pos))
plt.xlabel('Time (ms)')
plt.ylabel('Membrane Potential (mV)')


#%%
